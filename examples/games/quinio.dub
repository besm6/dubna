*name quinio
*call putflag*
61
*algol
'begin'
    'comment' L. Meertens, R 1082, LM 010964/9219.
    QUINIO (GO-MOKU). Zie voor de spelregels aparte beschrijving.:
    Indien X1 moet beginnen, d25 = 0 maken, anders d25 = 1 maken.
    Inbrengen van zet: x-coordinaat binair in d9 t/m d5,
    y-coordinaat in d4 t/m d0.
    Bijv. 11-7 wordt in d9 t/m d0 (XEEN(1023)
    genoteerd als 01011 00111.
    Doorstarten met BVA. De zet wordt uitgetypt,
    en de machine stopt weer.
    Indien nu blijkt dat men zich vergist heeft,
     dan kan men met negatief consolewoord doorstarten,
    waarna opnieuw gelegenheid geboden wordt een zet
    in te brengen. Wordt met positief consolewoord
    doorgestart, dan wordt de zet uitgevoerd en
    bezint de X1 zich op zijn volg'end'e zet.
    Is bijgeval helemaal geen zet uitgetypt,
    dan correspondeert de stand van de tien rechter-
    schakelaars niet met een correcte zet.
    Men kan alsnog een betere zet inbrengen;

    'integer' k, j, av, tn, nt, vnl, x, y, sw, wm, kleur, znr, km;
    'Boolean' klaar;
    'integer' 'array' DP[-6 : +6, 0 : 2], Z[1 : 6];

    'integer' 'procedure' div(a, b);
        'value' a, b;
        'integer' a, b;
    div := entier(a/b);

    'procedure' NLCR;
    PRINT(NEWLINE);

    'comment' UNDEFINED---------------------------------------------;

    'integer' 'procedure' XEEN(mask);
        'value' mask;
        'integer' mask;
    XEEN := 0;

    'integer' 'procedure' EVEN(mask); 'comment' perhaps same as XEEN;
        'value' mask;
        'integer' mask;
    EVEN := 0;

    'integer' 'procedure' available;
    available := 10240;

    'integer' 'procedure' SUM(a, b, c, d);
        'value' b, c;
        'integer' a, b, c;
        'real' d;
    'begin'
        'real' t;
        t := 0;
        'for' a := b 'step' 1 'until' c 'do'
            t := t + d;
        SUM := entier(t)
    'end';

    'procedure' FIXT(a, b, c);
        'value' a, b, c;
        'integer' a, b, c;
    'begin' 'end';

    'procedure' ABSFIXT(a, b, c);
        'value' a, b, c;
        'integer' a, b, c;
    'begin' 'end';

    'comment' END OF UNDEFINED--------------------------------------;

    'Boolean' 'procedure' minim(x, p);
        'value' p;
        'integer' x, p;
    'if' p < x 'then'
        'begin'
            x := p;
            minim := 'true'
        'end'
    'else'
        minim := 'false';

    'Boolean' 'procedure' maxim(x, p);
        'value' p;
        'integer' x, p;
    'if' p > x 'then'
        'begin'
            x := p;
            maxim := 'true'
        'end'
    'else'
        maxim := 'false';

    nt := div(entier(sqrt((available - 1000) / 36) - 1), 2) * 2 + 1;
    minim(nt, 19);
    av := nt * nt;
    tn := 1 + div(nt, 2);
    NLCR;
    print(nt);

    'begin'
        'integer' 'array' RNUM, RLANG, RVRY[1 : av, 0 : 1, 1 : 4],
            RVAL[1 : av, 1 : 4], TEMPO, WT[1 : av, 0 : 1], AX,
            AY[1 :av], BORD, AVNL[1 : nt, 1 : nt];

        'procedure' CORR(x0, y0);
            'value' x0, y0;
            'integer' x0, y0;
        'begin'
            'integer' x, y, dx, dy, min, max, q, k, j, b, t, d, w,
                      xdx, ydy, zdz;
            dx := +1;
            dy := -1;
            klaar := 'false';
            'for' q := 1, 2, 3, 4 'do'
            'begin'
                zdz := xdx := (x0 - tn) * dx;
                ydy := (y0 - tn) * dy;
                minim(zdz, ydy);
                min := 3 - tn - zdz;
                max := - min - xdx - ydy;
                maxim(min, -6);
                minim(max, +6);
                'if' min > max 'then'
                    'goto' NOR;
                'for' k := 0, 1, 2 'do'
                    DP[min, k] := 0;
                'for' k := -2 'step' 1 'until' +2 'do'
                'begin'
                    b := BORD[x0 + (min + k) * dx, y0 + (min + k) * dy];
                    DP[min, b] := DP[min, b] + 1
                'end';
                'for' k := min + 1 'step' 1 'until' max 'do'
                'begin'
                    'if' DP[k - 1, kleur] = 5 'then'
                        'goto'WIN;
                    'for' b := 0, 1, 2 'do'
                        DP[k, b] := DP[k - 1, b];
                    'for' j := -3, +2 'do'
                    'begin'
                        b := BORD[x0 + (k + j) * dx, y0 + (k + j) * dy];
                        DP[k, b] := DP[k, b] + sign(j)
                    'end'
                'end';
                'if' DP[max, kleur] = 5 'then'
WIN:            'begin'
                    klaar := 'true';
                    'goto'UIT
                'end';
                'for' k := -6 'step' 1 'until' min - 1,
                      max + 1 'step' 1 'until' 6 'do'
                        DP[k, 0] := DP[k, 1] := 1;
                min := 1 - tn - zdz;
                max := - min - xdx - ydy;
                maxim(min, -4);
                minim(max, +4);
                'for' k := min 'step' 1 'until' -1,
                            +1 'step' 1 'until' max 'do'
                'begin'
                    x := x0 + k * dx;
                    y := y0 + k * dy;
                    'if' BORD[x, y] = 2 'then'
                    'begin'
                        vnl := AVNL[x, y];
                        'if' vnl > sw 'then'
                        'begin'
                            AVNL[x, y] := 0;
                            'goto'NXT
                        'end';
                        'if' vnl 'ne' 0 'then'
                        'begin'
                            RVAL[vnl, q] := 0;
                            'for' b := 0, 1 'do'
                                RNUM [vnl, b, q] :=
                                RLANG [vnl, b, q] :=
                                RVRY[vnl, b, q] := 0
                        'end' 'else' 'begin'
                            vnl := AVNL[x, y] := sw;
                            AX[sw] := x;
                            AY[sw] := y;
                            sw := sw + 1;
                            'for' j := 1, 2, 3, 4 'do'
                            'begin'
                                RVAL[vnl, j] := 0;
                                'for' b := 0, 1 'do'
                                    RNUM[vnl, b, j] :=
                                    RLANG[vnl, b, j] :=
                                    RVRY[vnl, b, j] := 0
                            'end'
                        'end';
                        'for' j := -2 'step' 1 'until' +2 'do'
                            'for' b := 0, 1 'do'
                            'begin'
                                'if' DP[k + j, 1 - b] = 0 'then'
                                'begin'
                                    d := DP[k + j, b];
                                    RVAL[vnl, q] := RVAL[vnl, q] + d;
                                    'if' maxim(RLANG[vnl, b, q], d)
                                    'then' RVRY[vnl, b, q] := 0
                                    'else' 'if' RLANG [vnl, b, q] = d
                                    'then' RVRY[vnl, b, q] := 1;
                                    RNUM[vnl, b, q] :=
                                        RNUM[vnl, b, q] + 1
                                'end'
                            'end';
                        TEMPO[vnl, 0] :=
                        TEMPO[vnl, 1] :=
                        WT[vnl, 0] :=
                        WT[vnl, 1] := 4;
                        'for' j := 1, 2, 3, 4 'do'
                            'for' b := 0, 1 'do'
                            'begin'
                                t := 4 - RLANG[vnl, b, j];
                                w := t - RVRY[vnl, b, j];
                                minim(TEMPO[vnl, b], t);
                                'if' 'if' minim(WT[vnl, b], w)
                                    'then' 'false' 'else' w = 1
                                    'and' WT[vnl, b] = 1 'then'
                                    WT[vnl, b] := 0;
                            'end'
                    'end';
NXT:            'end';
NOR:            'if' q = 3 'then'
                    dx := 0
                'else'
                    dy := dy + 1;
            'end';
UIT:    'end';

        'procedure' ZET(x, y);
            'value' x, y;
            'integer' x, y;
        'begin'
            BORD[x, y] := kleur;
            CORR(x, y);
            kleur := 1 - kleur;
            znr := znr + 1
        'end';

        'procedure' PRINTZET(x, y);
            'value' x, y;
            'integer' x, y;
        'begin'
            'if' EVEN(znr) < 0 'or' XEEN(-1) < 0 'then'
                NLCR;
            ABSFIXT(5, 0, znr);
            PRINT(''.'');
            ABSFIXT(3, 0, x);
            FIXT(3, 0, -y)
        'end';

        'integer' 'procedure' SEL;
        'begin'
            'integer' v, k, j, wsl, w, m;
            w := 4;
            v := m := 0;
            'for' k := sw - 1 'step' -1 'until' 1 'do'
            'begin'
                'if' 'if' BORD [AX[k], AY[k]] = 2 'then'
                          WT[k, 1 - kleur] = 0 'else' 'false'
                'then'
                    minim(w, TEMPO[k, 1 - kleur])
            'end';
            'for' k := sw - 1 'step' -1 'until' 1 'do'
            'begin'
                'if' 'if' BORD[AX[k], AY[k]] = 2 'then'
                        ('if' TEMPO[k, kleur] < w 'then' 'true' 'else'
                         'if' WT[k, 1 - kleur] = 0 'then'
                            w = TEMPO[k, 1 - kleur] 'else' 'false')
                     'else' 'false' 'then'
                'begin'
                    'integer' a, b;
                    a := SUM(j, 1, 4,
                             2.0 * RVAL[k, j] + RNUM[k, kleur, j]);
                    b := SUM(j, 0, 1, 2 *
                             (7.0 - WT[k, j] - abs(j - kleur) / 2.0));
                    'if' maxim(v, a + b) 'then'
                        m := k
                'end'
            'end';
            SEL := m
        'end';

        NLCR;
        'for' x := 1 'step' 1 'until' nt 'do'
            'for' y := 1 'step' 1 'until' nt 'do'
            'begin'
                BORD[x, y] := 2;
                AVNL[x, y] := 0
            'end';
        kleur := sign(XEEN(33554432));
        NLCR;
        sw := znr := 1;
        'if' kleur = 0 'then'
        'begin'
            PRINT(''                   X1                       N.N.'');
            PRINTZET(tn, tn);
            ZET(tn, tn)
        'end' 'else'
            PRINT(''                   N.N.                     X1'');
MENS:   stop;
        x := div(XEEN(992), 32);
        y := XEEN(31);
        'if' x = 0 'or' x > nt 'or' y = 0 'or' y > nt 'then'
            'goto' MENS;
        'if' BORD[x, y] 'ne' 2 'then'
            'goto' MENS;
        PRINTZET(x, y);
        stop;
        'if' XEEN(-1) < 0 'then'
            'goto' MENS;
        ZET(x, y);
        'if' klaar 'then'
            'goto' LKLAAR;

MACH:   km := SEL;
        'if' km = 0 'then'
        'begin'
            NLCR;
            PRINT('' Ik geef op'');
            'goto' LKLAAR
        'end';
        x := AX[km];
        y := AY[km];
        PRINTZET(x, y);
        ZET(x, y);
        'if' 'not' klaar 'then'
            'goto'MENS;
LKLAAR: NLCR;
        'if' kleur = 0 'then'
            PRINT('' U hebt gewonnen'')
        'else'
            PRINT('' Ik heb gewonnen'')
    'end'
'end'
'eop'
*end file
