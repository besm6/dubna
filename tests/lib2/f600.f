      PROGRAM F600
C     THIS IS A TEST PROGRAM FOR THE SINGULAR VALUE DECOMPOSITION
C     ROUTINE SVD, F600.
C     44 M*N-MATRICES (M=3,10, N=2,M) ARE CREATED FROM THEIR SINGULAR
C     VALUE DECOMPOSITION, SVD IS CALLED AND THE RESULTS ARE COMPARED
C     WITH THE ORIGINAL DATA.
C     THE RELATIVE ERRORS IN THE SINGULAR VALUES AND THE ABSOLUTE ERRORS
C     IN THE ELEMENTS OF THE UNITARY MATRICES ARE COMPUTED.
C     A TEST FOR UT*B (SEE COMMENTS IN SVD) IS ALSO MADE WHEN M>N. THE
C     COLUMNS IN B ARE THEN ORTHOGONAL TO THE COLUMNS OF U, WHICH SHOULD
C     GIVE A ZERO MATRIX. THE ABSOLUTE ERROR IN UT*B IS COMPUTED.
C     THE LARGEST ERROR FOUND IS PRINTED. IF THIS VALUE IS LESS THAN
C     10**-12 THE TEXT 'TEST PASSED' IS PRINTED.
C     THE TEST PROGRAM WAS WRITTEN 23.4.1975 BY EVA EDBERG, CERN.
C
      DIMENSION A(10,10),V(10,10),S(10),U1(10,10),V1(10,10),S1(10)
      DIMENSION B(10,10)
      INTEGER P
      ERRMAX=0.
      DO 50 M=3,10
      DO 50 N=2,M
      CALL UNITAR(U1,M,10)
      CALL UNITAR(V1,N,10)
      DO 5 I=1,N
      S1(I)=FLOAT(N-I)+RNDM(-1.)
      DO 5 J=1,N
    5 V(J,I)=V1(J,I)*S1(I)
      DO 10 I=1,M
      DO 10 J=1,N
      A(I,J)=0.
      DO 10 K=1,N
   10 A(I,J)=A(I,J)+U1(I,K)*V(J,K)
      IF(N.EQ.M) GO TO 25
C    -----
C     IF M>N, A IS COPIED TO A MATRIX B, WHERE ALSO THE LAST M-N COLUMNS
C     ARE SET EQUAL TO THE LAST COLUMNS OF U1.
      P=M-N
      NP1=N+1
      DO 20 I=1,M
      DO 15 J=1,N
   15 B(I,J)=A(I,J)
      DO 20 J=NP1,M
   20 B(I,J)=U1(I,J)
      CALL SVD(B,S,V,10,10,M,N,P,.TRUE.,.TRUE.)
      CALL CSV(S,S1,N,ERRMX)
      IF(ERRMX.GT.ERRMAX) ERRMAX=ERRMX
      CALL CZR(B(1,NP1),10,N,P,ERRMX)
      IF(ERRMX.GT.ERRMAX) ERRMAX=ERRMX
C     ADDITIONAL OUTPUT
C     PRINT 700,ERRMX
C    -----
   25 CONTINUE
      CALL SVD(A,S,V,10,10,M,N,0,.TRUE.,.TRUE.)
      CALL CSV(S,S1,N,ERRMX)
C     ADDITIONAL PRINTING
C     PRINT 100,ERRMX
      IF(ERRMX.GT.ERRMAX) ERRMAX=ERRMX
      CALL CMTRX(A,U1,10,M,N,ERRMX)
C     ADDITIONAL PRINTING
C     PRINT 200,ERRMX
      IF(ERRMX.GT.ERRMAX) ERRMAX=ERRMX
      CALL CMTRX(V,V1,10,N,N,ERRMX)
C     ADDITIONAL PRINTING
C     PRINT 300,ERRMX
      IF(ERRMX.GT.ERRMAX)  ERRMAX=ERRMX
   50 CONTINUE
      PRINT 400,ERRMAX
      IF(ERRMAX.GE.1.E-10) PRINT 500
C 100 FORMAT(///,5X,*MAX. REL. ERROR IN SINGULAR VALUE*,E15.5)
C 200 FORMAT(5X,*MAX. ERROR IN THE MATRIX U       *,E15.5)
C 300 FORMAT(5X,*MAX. ERROR IN THE MATRIX V       *,E15.5)
  400 FORMAT(///,5X,  10HMAX. ERROR,E15.5)
  500 FORMAT(////,10X,  15HTEST NOT PASSED)
C 700 FORMAT(5X,*MAX. ERROR IN THE ZERO MATRIX    *,E15.5)
      END
      SUBROUTINE CSV(S,V,N,ERM)
      DIMENSION S(N),V(N)
      ERM=0.
      DO 10 I=1,N
      ERR=ABS((S(I)-V(I))/V(I))
      IF(ERR.GT.ERM) ERM=ERR
   10 CONTINUE
      RETURN
      END
      SUBROUTINE CMTRX(A,B,MDIM,M,N,ERM)
      DIMENSION A(MDIM,N),B(MDIM,N)
      ERM=0.
C     COMPARE EVERY COLUMN SEPARATELY, SINCE THE CORRESPONDING COLUMNS
C     IN A AND B CAN HAVE DIFFERENT SIGNS.
      DO 20 J=1,N
      DO 5 I=1,M
      IF(ABS(A(I,J)).LT.1.E-5.OR.ABS(B(I,J)).LT.1.E-5) GO TO 5
      SGN=SIGN(1.,A(I,J)*B(I,J))
      GO TO 6
    5 CONTINUE
      PRINT 100
      STOP
    6 IF(SGN.LT.0.) GO TO 8
      DO 7 I=1,M
      ERR=ABS(A(I,J)-B(I,J))
      IF( ERR.GT.ERM) ERM=ERR
    7 CONTINUE
      RETURN
    8 DO 9 I=1,M
      ERR=ABS(A(I,J)+B(I,J))
      IF( ERR.GT.ERM) ERM=ERR
    9 CONTINUE
   20 CONTINUE
      RETURN
  100 FORMAT(10X,  42HCOLUMN WITH TOO SMALL ELEMENTS ENCOUNTERED)
      END
      SUBROUTINE UNITAR(U,N,NDIM)
      DIMENSION U(NDIM,1)
      DO 1 I=1,N
      DO 1 J=1,N
 1    U(I,J)=-1.+2.*(RNDM(-1.))
      DO 2 J=1,N
      UJ=0.
      DO 3 I=1,N
 3    UJ=UJ+U(I,J)*U(I,J)
      IF(J.EQ.N) GOTO 7
      KSTA=J+1
      DO 4 K=KSTA,N
      UJK=0.
      DO 5 I=1,N
 5    UJK=UJK+U(I,J)*U(I,K)
      CJK=UJK/UJ
      DO 6 I=1,N
 6    U(I,K)=U(I,K)-CJK*U(I,J)
 4    CONTINUE
 7    UJ=1./SQRT(UJ)
      DO 8 I=1,N
 8    U(I,J)=UJ*U(I,J)
 2    CONTINUE
      RETURN
      END
      SUBROUTINE CZR(A,MDIM,M,N,ERM)
C     THIS SUBROUTINE GIVES THE LARGEST (IN ABSOLUTE VALUE) ELEMENT IN A
C     MATRIX.
      DIMENSION A(MDIM,N)
      ERM=0.
      DO 10 I=1,M
      DO 10 J=1,N
      IF(ABS(A(I,J)).GT.ERM) ERM=ABS(A(I,J))
   10 CONTINUE
      RETURN
      END
*EXECUTE
*
*
